---
pagetitle: "Reconciliation Forecasting"
subtitle: "Land Transfer Duty"
author: "Hoang Do"
email: "vdoo0002@student.monash.edu"
date: "22-05-2024"
unit-url: "https://github.com/justin-git01/ltd_forecasting"
footer: "Department of Treasury and Finance"
format: 
  revealjs:
    slide-number: c
    width: 1280
    height: 720
    logo: images/monash-one-line-black-rgb.png
    theme: assets/monash.scss
    css: [assets/tachyons-addon.css, assets/custom.css]
    include-after-body: "assets/after-body.html"
execute:
  echo: false
---

```{r, include = FALSE}
current_file <- knitr::current_input()
basename <- gsub(".[Rq]md$", "", current_file)
library(tidyverse)
library(kableExtra)
library(readxl)
library(fpp3)
library(plotly)
library(ggplot2)
library(visNetwork)
library(tidygraph)
library(corrplot)
library(urca)
library(tseries)
library(dplyr)

knitr::opts_chunk$set(
  fig.path = sprintf("images/%s/", basename),
  fig.width = 6,
  fig.height = 4,
  fig.align = "center",
  out.width = "100%",
  fig.retina = 3,
  warning = FALSE,
  message = FALSE,
  cache = F,
  cache.path = "cache/"
)
```

```{r}
visnetwork_hierarchy <- function(data, ...) {
  nodes <- as_tibble(mutate(activate(data, "nodes"), id = row_number(), level = node_distance_from(node_is_root())))
  edges <- as_tibble(activate(data, "edges"))
  graph <- visNetwork(nodes, edges, ...) |> 
    visHierarchicalLayout(direction = "UD", shakeTowards = "leaves") |> 
    visOptions(
      highlightNearest = list(enabled = TRUE, degree = list(from = 50000, to = 0), hover = FALSE, algorithm = "hierarchical"), 
      collapse = list(enabled = TRUE, fit = FALSE, resetHighlight = TRUE, keepCoord = TRUE,
                      clusterOptions = list(fixed = TRUE, physics = TRUE))
    ) |> 
    visEdges(scaling = list(label = list(enabled = FALSE)), arrows = "to") |> 
    visNodes(font = list(size = 16))
  
  graph$x$tree <- list(updateShape = TRUE, shapeVar = "dot", shapeY = "square")
  graph
}
visnetwork_graph <- function(data, layout = "layout_nicely", ...) {
  nodes <- as_tibble(mutate(activate(data, "nodes"), id = row_number()))
  edges <- as_tibble(activate(data, "edges"))
  graph <- visNetwork(nodes, edges, ...) |> 
    visIgraphLayout(layout = layout, randomSeed = 123091238) |> 
    visOptions(
      highlightNearest = list(enabled = TRUE, degree = list(from = 50000, to = 0), hover = FALSE)
    ) |> 
    visEdges(width = 3, scaling = list(label = list(enabled = FALSE)), arrows = "to") |> 
    visNodes(size = 20)
  
  graph$x$tree <- list(updateShape = TRUE, shapeVar = "dot", shapeY = "square")
  graph
}
```


```{r}
# Load ltd aggregate date
ltd_agg <- read_excel(here::here("data/LTD_new.xlsx"), sheet = 1) |>
  rename(Date = ...1,
         ltd = LTD,
         sales = SALES,
         hvi = HVI) |>
  dplyr::select(c(Date, ltd, sales, hvi)) 

ltd_agg_ts <- ltd_agg |>
  mutate(Month = yearmonth(Date)) |>
  dplyr::select(-Date)  |>
  as_tsibble(index = Month) |>
  relocate(Month)

# Load ltd unit data
ltd_unit <- read_excel(here::here("data/LTD_new.xlsx"), sheet = 2) |>
  rename(Date = ...1) |>
  dplyr::select(Date, ltd_total, ltd_nonres, ltd_comm, ltd_ind, ltd_other, ltd_res)

ltd_unit_ts <- ltd_unit |>
  mutate(Month = yearmonth(Date)) |>
  dplyr::select(-Date)  |>
  as_tsibble(index = Month) |>
  relocate(Month)
```

```{r}
tax_rev <- read_excel(here::here("data/tax_rev.xlsx"), sheet = 2) |>
  rename(Date = ...1)|>
  mutate(reliance = `Reliance on stamp duty` *100 ) |>
  dplyr::select(Date, reliance) |>
  mutate(Quarter = yearquarter(Date)) |>
  dplyr::select(-Date)  |>
  as_tsibble(index = Quarter) |>
  relocate(Quarter)
```

```{r}
load(here::here("data/dtf_rmse.RData"))
```

```{r, echo = F, message = F, warning = F}
load(here::here("data/base_arima_fc.RData"))
load(here::here("data/base_vecm_fc.RData"))
  
load(here::here("data/rec_arima.RData"))
load(here::here("data/rec_vecm.RData"))
  
load(here::here("data/test_set.RData"))
```

```{r, echo = F, message = F, warning = F}
## RMSE for base forecast (row: level , col: h_step)
RMSE_array_arima_base <- sqrt((base_arima_forecast-test_set)^2)
RMSE_arima_h_base <- apply(RMSE_array_arima_base, c(1,2), mean)

## RMSE for reconciled forecast (row: level, col: h_step)
RMSE_array_arima_rec <- sqrt((reconciled_arima-test_set)^2)
RMSE_arima_h_rec <- apply(RMSE_array_arima_rec, c(1,2), mean)

## reconciled RMSE / base RMSE (< 1 means improvement of reconciled forecast)
RMSE_arima_prop <- RMSE_arima_h_rec / RMSE_arima_h_base


## RMSE for base forecast (row: level , col: h_step)
RMSE_array_vecm_base <- sqrt((base_vecm_forecast-test_set)^2)
RMSE_vecm_h_base <- apply(RMSE_array_vecm_base, c(1,2), mean)

# VECM tcs

## RMSE for reconciled forecast (row: level, col: h_step)
RMSE_array_vecm_tcs_rec <- sqrt((reconciled_vecm_tcs-test_set)^2)
RMSE_vecm_h_tcs_rec <- apply(RMSE_array_vecm_tcs_rec, c(1,2), mean)

## reconciled RMSE / base RMSE  (< 1 means improvement of reconciled forecast)
RMSE_vecm_tcs_prop <- RMSE_vecm_h_tcs_rec / RMSE_vecm_h_base

```


## <br>[`r rmarkdown::metadata$pagetitle`]{.monash-blue} {#etc5523-title background-image="images/bg-01.png"}

### `r rmarkdown::metadata$subtitle`

Author: *`r rmarkdown::metadata$author`*

`r rmarkdown::metadata$department`

::: tl
<br>

<ul class="fa-ul">

<li>

[<i class="fas fa-envelope"></i>]{.fa-li}`r rmarkdown::metadata$email`

</li>

<li>

[<i class="fas fa-calendar-alt"></i>]{.fa-li} `r rmarkdown::metadata$date`

</li>

<li>

[<i class="fa-solid fa-globe"></i>]{.fa-li}<a href="`r rmarkdown::metadata[["unit-url"]]`">`r rmarkdown::metadata[["unit-url"]]`</a>

</li>

</ul>

<br>
:::


## {}
<center>
<img src="images/intro_pic.png" height = "620">

</center>

::: aside

Image generated by [ChatGPT](chat.openai.com).

:::

# Land Transfer Duty {background-color=#006DAE}

## {background-image="images/mel_city1.jpg"}

<center>
::: {.monash-bg-white .pa3 style="opacity:0.85;" .w-80}
::: callout-note

## What is Land Transfer Duty? (or Stamp Duty)

* Paid when a property is *bought* or *acquired*

* Varies by property *value*, *usage*, *buyer nationality*, and *eligibility for exemptions*.

:::
:::
</center>
<br>
<center>
```{r total_ltd, fig.height = 3.2, fig.width = 4, out.width="54%"}
plot_total <- ltd_agg_ts |> 
filter(Month > yearmonth(as.POSIXct("2000-01-01"))) |>
mutate(ltd_inM = ltd/1000000) |> 
autoplot(ltd_inM, color = "blue") +
labs(x = "Date", y = "Land Transfer Duty (in $million)", title = "Land Transfer Duty from 2010") +
theme_minimal()

ggplotly(plot_total)

```
</center>

## Impact of LTD

<center>
::: callout-warning

## On property market

* A 100 basis point cut in transfer duty could boost property transactions by 10%. (Source: [NSW Treasury](https://www.treasury.nsw.gov.au/sites/default/files/2021-06/the_economic_costs_of_transfer_duty_a_literature_review.pdf))

* Victoria's tax revenue is heavily dependent on land transfer duty

:::

```{r tax_revenue, fig.height = 3, fig.width = 4, out.width="50%"}
tax_revenue <- tax_rev |> 
autoplot(reliance, color = "blue") +
geom_hline(yintercept = mean(tax_rev$reliance), color = "red") +
labs(x = "Date", y = "Percentage", title = "Victoria tax revenue's reliance on LTD") +
theme_minimal()

ggplotly(tax_revenue)
```
</center>



## Current forecasting approach

::: callout-note
## Model used by DTF

* Cointegration pattern between LTD, Sales, and Home Value Index (HVI)

* Vector Error Correction Model (VECM) with 3 lags

* RMSE: Constantly drops until 7-step-ahead forecasts then increases

:::

<center>

```{r dtf_rmse, fig.height = 3, fig.width = 3, out.width="50%"}

## Create the plot
dtf_rmse <- ggplot(fold_rmse, aes(x = h, y = average_rmse)) +
  geom_line(linewidth = 1.1, color = "red") +
  labs(x = "h-step Forecast", y = "RMSE Value", title = "Total LTD forecast RMSE with DTF approach") +
  scale_x_continuous(breaks = 1:12) +
  theme_minimal()

## Convert ggplot to plotly
ggplotly(dtf_rmse)
```

</center>





# Applying Forecast Reconciliation {background="#006DAE"}

## Hierarchical Time Series

::: callout-warning

## Limitations

* Characteristics of different levels may differ

* Include these features can improve forecast accuracy

:::

<center>
```{r}
#| echo: false
#| output: hide
tidygraph::tbl_graph(
  nodes = tibble(label = c("Total", "Non-Residential", "Residential", "Industry", "Commercial","Other")),
  edges = tibble(from = c(1, 1, 2, 2, 2), to = c(2, 3, 4, 5, 6))
) |>
  visnetwork_hierarchy(width = 750, height = 350)
```
</center>

## Notation

::: callout-note

## Hierarchy structure for LTD 

Can be written in matrix form: 

$$
\begin{bmatrix}
  \text{Total}_{t} \\
  \text{Non-residential}_{t} \\
  \text{Residential}_{t} \\
  \text{Commercial}_{t} \\
  \text{Industrial}_{t} \\
  \text{Other}_{t} \\
  \end{bmatrix}
=
\begin{bmatrix}
  1 & 1 & 1 & 1 \\
  0 & 1 & 1 & 1 \\
  1 & 0 & 0 & 0 \\
  0 & 1 & 0 & 0 \\
  0 & 0 & 1 & 0 \\
  0 & 0 & 0 & 1 \\
\end{bmatrix}
\begin{bmatrix}
  \text{Residential}_{t} \\
  \text{Commercial}_{t} \\
  \text{Industrial}_{t} \\
  \text{Other}_{t} \\
\end{bmatrix}
$$
or in a more compact notation:

$$
\text{LTD}_{t} = \text{S}\text{b}_{t},
$$
:::

## Temporal hierarchy 

::: {.callout-note}

A time series can be disaggregated by non-overlapping temporal frequencies
<center>
```{r}
tidygraph::tbl_graph(
  nodes = tibble(label = c("Year", "Q1", "Q2", "Q3", "Q4", month.abb)),
  edges = tibble(from = c(rep(1, 4), rep(2:5, each = 3)), to = c(2:17))
) |>
  visnetwork_hierarchy(width = 600, height = 200) |> 
  visNodes(font = list(size = 40))
```
</center>
:::

Temporal reconciliation is described in [**Athanasopoulos et al. (2017).**]{.monash-blue}


## Cross-sectional + Temporal = Cross-Temporal

<center>
<img src="images/cross-temporal.png" width = "70%" height = "80%">

</center>

::: aside

Image from [**Kourentzes and Athanasopoulos (2019)**]{.monash-blue}

:::



# Forecast ALL series {background="#006DAE"}



## {auto-animate=true}

::: {style="margin-top: 200px; font-size: 3em; color: red;"}
Forecast at different levels don't add up!
:::

## {auto-animate=true}

::: {style="margin-top: 100px;"}
Forecast at different levels don't add up!
:::

::: {.callout-important}

Independently produced forecasts are [**incoherent**]{.danger},

$\text{LTD}_{T+h|T} \neq \text{Comm}_{T+h|T} + \text{Ind}_{T+h|T} + \text{Other}_{T+h|T} + \text{Residential}_{T+h|T}$.

Or for temporal hierarchy

$\text{Year}_{T+h|T} \neq \text{Jan}_{T+h|T} + \text{Feb}_{T+h|T} + \text{Mar}_{T+h|T} + ... + \text{Dec}_{T+h|T}$.
:::


# Reconciliation {background="#006DAE"}



## 2-step reconciliation process

::: callout-important
Forecast reconciliation is a post-forecasting process that involves transforming
a set of incoherent forecasts into coherent forecasts which satisfy a given set of
linear constraints for a multivariate time series.
:::

::: callout-note
## Hyndman et al. (2011)
* First obtain a set of base forecast $\hat{\text{y}}_{h}$, 

* Then all coherent forecast can be represented as:
<center>
$\tilde{\text{y}}_{h} = \text{SG}\hat{\text{y}}_{h}$, 
</center>

where **G** is a matrix that maps the base forecasts into the bottom level, and the summing matrix **S** sums these up using the aggregation structure to produce a set of **coherent forecasts** $\tilde{\text{y}}_\text{h}$

:::

# Minimize variance {background="#006DAE"}

## MinTrace

::: callout-note
[**Wickramasuriya et al. (2019)**]{.monash-blue} show that the variance-covariance of the h-step-ahead coherent forecast errors is given by:

<center>
$\text{V}_{h} = Var[\text{y}_{T+h} - \tilde{\text{y}}_{h}] = SG\text{W}_{h}G'S'$,
</center>

where $\text{W}_{h} = Var[\text{y}_{T+h} - \hat{\text{y}}_{h}]$ is the variance-covariance matrix of the corresponding base forecast errors.

The objective is to find a matrix **G** that minimises the error variances of the coherent forecasts.


:::

## MinTrace

:::callout-note
[**Wickramasuriya et al. (2019)**]{.monash-blue} show that: 

<center>
$G = (S'\text{W}_{h}^{-1}S)^{-1}S'\text{W}_{h}^{-1}$,
</center>

minimises the trace of $\text{V}_{h}$ subject to **S** **G** **S** = **S**

Therefore, the optimally reconciled forecasts are given by:

<center>
$\tilde{y}_{h} = S(S'\text{W}_{h}^{-1}S)^{-1}S'\text{W}_{h}^{-1}\hat{y}_{h}$,
</center>
which refers as the **MinT**

Now we need to estimate $\text{W}_{h}$, which is challenging.

Assumption made to set **$\text{W}_{h} = \text{k}_{h}\text{I}_{n}$** to simplify the estimation ([**Hyndman et al. (2011)**]{.monash-blue}, [**Athanasopoulos et al. (2009)**]{.monash-blue}).

:::

# Cross-temporal reconciliation {background="#006DAE"}
::: {.monash-gray10 .f2 .footnote}

<br><br>

Heuristic first-temporal-then-cross-sectional reconciliation

:::
## 2-step approach

<center>
<img src="images/tcs.png" width = "70%" height = "60%">

</center>

::: callout-note
## Kourentzes and Athanasopoulos (2019)
* **Step 1**: reconciliation through temporal hierarchies for each single variable
        --> **temporally coherence** forecast
        
* **Step 2**: time-by-time cross-sectional reconciliation of the previously computed forecast
        --> **cross-sectionally coherence** forecast

* The final reconciled forecast are calculated starting from the step 1 forecasts through the average of the step 2 projection matrices
        --> **cross-temporally coherence** forecast
:::

::: aside
Image from [**Daniele Girolimetto**'s talk for **F4SG**]{.monash-blue}
:::

## FoReco package

<img src="images/logo.svg" class="absolute right-0 bottom-0" height="350px">

::: callout-note
## R package, Di Fonzo and Girolimetto (2022)
* Offers classical (bottom-up and top-down) and modern (optimal and heuristic combination) **forecast reconciliation procedures** 

* Allows for *cross-sectional*, *temporal* and *cross-temporal* linearly constrained multiple time series
:::

::: aside

More info on FoReco package can be found [here](https://cran.r-project.org/web/packages/FoReco/index.html)

:::

# Results {background="#006DAE"}

## {}

::: callout-note
# Comparing base forecasts

* Cross-temporal VECM forecast performs much better

:::

<center>

```{r base_vs_base, fig.height = 3, fig.width = 3, out.width="50%"}
# Plotting RMSE of base forecast to choose the benchmark 
## Node index (1: Total, 2: Non-residential, 3: Commercial, 4: Industrial, 5: Other, 5: Residential)
i = 1
## Create a data frame for plotting
rmse_base_data <- data.frame(
  h_step = 1:12,
  RMSE_ARIMA_base = RMSE_arima_h_base[i,],
  RMSE_VECM_base = RMSE_vecm_h_base[i,]
)

## Convert to long format
rmse_data_long <- rmse_base_data %>% 
  pivot_longer(cols = -h_step, names_to = "Method", values_to = "RMSE")


## Create the plot
ggplot_rmse <- ggplot(rmse_data_long, aes(x = h_step, y = RMSE, colour = Method)) +
  geom_line(linewidth = 1.1) +
  labs(x = "h-step Forecast", y = "RMSE Value", title = "Total LTD base forecast RMSE by Method") +
  scale_x_continuous(breaks = 1:12) +
  theme_minimal()

## Convert ggplot to plotly
ggplotly(ggplot_rmse)
```

</center>

## {}

::: callout-note
## Reconciliation forecast efficiency

* Not efficient enough from **1 to 3-step-ahead** forecasts

* Performs much better for long-term forecast

:::

<center>
```{r prop_rmse, fig.height = 3, fig.width = 3, out.width="70%"}
i = 1
# Create a data frame for plotting
prop_data <- data.frame(
  h_step = 1:12,
  reconciled_vecm = RMSE_vecm_tcs_prop[i,]
)

# Reshape for ggplot
prop_data_long <- prop_data %>%
  pivot_longer(cols = -h_step, names_to = "Method", values_to = "Proportion")

# Create the plot
ggplot_prop <- ggplot(prop_data, aes(x = h_step, y = reconciled_vecm)) +
  geom_line(linewidth = 1.1, color = "red") +
  geom_hline(yintercept = 1) +
  labs(x = "h-step Forecast", y = "Reconciled/Base Forecast", title = "Proportion of Reconciled Forecast to Base VECM Forecast") +
  scale_x_continuous(breaks = 1:12) +
  theme_minimal()

# Display the plot
ggplotly(ggplot_prop)

```
</center>


## {}

::: callout-note

# Comparing against base forecasts
* Cross-temporal forecasts do better from **1 to 4-step-ahead** forecast

* From **5-step-ahead** forecasts onward, approach by used by DTF better
:::

<center>

```{r dtf_vs_base, fig.height = 3, fig.width = 3, out.width="70%"}
# Plotting RMSE of base forecast to choose the benchmark 
## Node index (1: Total, 2: Non-residential, 3: Commercial, 4: Industrial, 5: Other, 5: Residential)
i = 1
## Create a data frame for plotting
rmse_base_data <- data.frame(
  h_step = 1:12,
  RMSE_ARIMA_base = RMSE_arima_h_base[i,],
  RMSE_VECM_base = RMSE_vecm_h_base[i,],
  RMSE_DTF = fold_rmse$average_rmse
)

## Convert to long format
rmse_data_long <- rmse_base_data %>% 
  pivot_longer(cols = -h_step, names_to = "Method", values_to = "RMSE")


## Create the plot
ggplot_rmse <- ggplot(rmse_data_long, aes(x = h_step, y = RMSE, colour = Method)) +
  geom_line(linewidth = 1.1) +
  labs(x = "h-step Forecast", y = "RMSE Value", title = "LTD base forecast RMSE against DTF approach") +
  scale_x_continuous(breaks = 1:12) +
  theme_minimal()

## Convert ggplot to plotly
ggplotly(ggplot_rmse)
```

</center>

## {}

::: callout-note
## Reconciled VECM and DTF approach against VECM base
* Overall, cross-temporal reconciled forecasts do better (**1 to 5-step-head and 10 to 12**)

* Not much difference at **6 to 9-step-head** forecasts

:::

<center>
```{r}
i=1
prop_data_one <- data.frame(
  h_step = 1:12,
  TCS = RMSE_vecm_tcs_prop[i,],
  dtf_base = fold_rmse$average_rmse/RMSE_vecm_h_base[i,]
)

# Reshape for ggplot
prop_data_long_one <- prop_data_one %>%
  pivot_longer(cols = -h_step, names_to = "Method", values_to = "Proportion")

# Create the plot
ggplot_prop_one <- ggplot(prop_data_long_one, aes(x = h_step, y = Proportion, colour = Method)) +
  geom_line(linewidth = 1.1) +
  geom_hline(yintercept = 1) +
  labs(x = "h-step Forecast", y = "Proportion", title = "Reconciled Forecast and DTF apprach against Base VECM Forecast") +
  scale_x_continuous(breaks = 1:12) +
  theme_minimal()

# Display the plot
ggplotly(ggplot_prop_one)
```


</center>


## {}

::: callout-note
## Reconciled VECM against DTF
* Below the horizontal line means cross-temporal forecast reconciliation performs better

* Overall, cross-temporal reconciled forecasts perform better

:::

<center>
```{r}
i=1
prop_data_vecm_dtf <- data.frame(
  h_step = 1:12,
  rec_to_dtf = RMSE_vecm_h_tcs_rec[i,]/fold_rmse$average_rmse
)

# Create the plot
ggplot_prop_vecm_dtf <- ggplot(prop_data_vecm_dtf, aes(x = h_step, y = rec_to_dtf)) +
  geom_line(linewidth = 1.1, color = "red") +
  geom_hline(yintercept = 1) +
  labs(x = "h-step Forecast", y = "Reconciled/DTF Forecast", title = "Proportion of Reconciled Forecast to DTF approach") +
  scale_x_continuous(breaks = 1:12) +
  theme_minimal()

# Display the plot
ggplotly(ggplot_prop_vecm_dtf)
```


</center>



## Recap 


::: callout-important

## Summary
* Overall, cross-temporal reconciled forecast performs better (short-term forecast)

* Room for improvements for short-term reconciled forecast against base forecast

* Accuracy improvement proves it is efficient enough to adopt forecast reconciliation
:::

## References
:::callout-tip
## Research Paper
Athanasopoulos, G., Ahmed, R. A., & Hyndman, R. J. (2009). Hierarchical forecasts for            Australian domestic tourism. International Journal of Forecasting, 25(1), 146-166.             [https://doi.org/10.1016/j.ijforecast.2008.07.004](https://doi.org/10.1016/j.ijforecast.2008.07.004)

Athanasopoulos, G., Hyndman, R. J., Kourentzes, N., & Petropoulos, F. (2017). Forecasting with
  temporal hierarchies. European Journal of Operational Research, 262(1), 60-74.                 [https://doi.org/10.1016/j.ejor.2017.02.046](https://doi.org/10.1016/j.ejor.2017.02.046)

Forecasting for Social Good. (2023, April 1). Forecast Reconciliation for Hierarchically         Organized Data [Video]. YouTube. [https://www.youtube.com/watch?v=6BCjz6hG6P8&t=931s](https://www.youtube.com/watch?v=6BCjz6hG6P8&t=931s)

Hyndman, R. J., Ahmed, R. A., Athanasopoulos, G., & Shang, H. L. (2011). Optimal combination     forecasts for hierarchical time series. Computational Statistics & Data Analysis, 55(9),       2579-2589. [https://doi.org/10.1016/j.csda.2011.03.006](https://doi.org/10.1016/j.csda.2011.03.006)

:::

## References
:::callout-tip
## Research Paper
Kourentzes, N., & Athanasopoulos, G. (2019). Cross-temporal coherent forecasts for Australian        tourism. Annals of Tourism Research, 75, 393-409.                                              [https://doi.org/10.1016/j.annals.2019.02.001](https://doi.org/10.1016/j.annals.2019.02.001)

Malakellis, M., & Warlters, M. (2021). The economic costs of transfer duty: a literature             review. NSW Government.                                                                        [https://www.treasury.nsw.gov.au/sites/default/files/2021-06/the_economic_costs_of_transfer_duty_a_literature_review.pdf](https://www.treasury.nsw.gov.au/sites/default/files/2021-06/the_economic_costs_of_transfer_duty_a_literature_review.pdf)

Wickramasuriya, S. L., Athanasopoulos, G., & Hyndman, R. J. (2018). Optimal forecast                 reconciliation for hierarchical and grouped time series through trace minimization.            Journal of the American Statistical Association, 114(526), 804-819.                            [https://doi.org/10.1080/01621459.2018.1448825](https://doi.org/10.1080/01621459.2018.1448825)

Girolimetto, D. & Di Fonzo, T. (2022), FoReco: Point Forecast Reconciliation.
      [https://danigiro.github.io/FoReco/](https://danigiro.github.io/FoReco/)
:::
## Addtional Resources

<center>
<img src="images/fpp3.jpeg">

</center>



# Thank you {background="#006DAE"}
## {background-image="images/thank_you.png"}






